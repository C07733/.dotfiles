(defwidget bar []
  (centerbox :orientation "h"
    (start)
    (center)
    (end)))

(defwidget start []
  (box :class "start"
       :orientation "h"
       :space-evenly false
       :halign "start"
       :spacing 9
    (workspaces)
    (microphone)
    (volume)
    (applaunch)))

(defwidget center []
  (box :class "center"
       :orientation "h"
       :space-evenly false
       :halign "center"
       :spacing 9
       (time)))

(defwidget end []
  (box :class "end" 
       :orientation "h" 
       :space-evenly false 
       :halign "end"
       :spacing 9
    (microphone)
    (volume)
    (updates)
    (ram)
    (cpu)
    (powermenu)))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "36px")
  (bar))

; Variables foldstart
(defpoll time_poll :interval "1s" "date +%H:%M")
(defpoll date_poll :interval "1m" "date +%d/%m/%Y")
(defpoll trash_poll :interval "10s" "./modules/trash.sh")
(defpoll updates_poll :initial "" :interval "1m" "./modules/updates.sh &") 

(deflisten workspaces_listen "./modules/workspace_bspwm/updateWorkspace.sh")
(deflisten player_listen :initial '{"show": "no", "content": ""}' "./modules/player.sh")
(deflisten notifications_listen :initial '{"show": "no", "content": ""}' "./modules/notifications.sh")

; Make this cleaner at some point
(defpoll microphone_poll :interval "999h" "./modules/microphone.sh")
(defpoll speaker_poll :interval "999h" "./modules/speaker.sh")
; foldend

; Modules foldstart
; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))
; foldend

; Polybar-Style modules foldstart
(defwidget workspaces []
  (literal :content workspaces_listen))

(defwidget volume []
  (icon-module :class "volume" :icon " " :visible "yes"
    (label :text "99")
    (label :class "units" :text "+db")))

(defwidget microphone []
  (icon-module :class "microphone" :icon " " :visible "yes"
    (label :text "99")
    (label :class "units" :text "+db")))

(defwidget applaunch []
  (icon-module :class "applaunch" :icon "[]=" :visible "yes"))

(defwidget player []
  (icon-module :class "player" :icon "" :visible {player_listen.show == "yes"}
    (literal :content {player_listen.content})))

(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem != ""}
    (label :text "${round(EWW_RAM.used_mem/1000000, 1)}")
    (label :class "units" :text "GB")))

(defwidget notifications []
  (icon-module :class "notifications" :icon "" :visible {notifications_listen.show == "yes"}
    (literal :content {notifications_listen.content}))) 

(defwidget date []
  (icon-module :class "date" :icon "" 
    (label :text date_poll)))

(defwidget time []
  (icon-module :class "time" :icon "" 
    (label :text time_poll)))  

(defwidget cpu []
  (icon-module :class "cpu" :icon "CPU" 
    (label :text "${round(EWW_CPU.avg, 0)}%")))
    ;(label :class "units" :text "%")))

(defwidget disk []
  (icon-module :class "disk" :icon "" 
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%"))) 

(defwidget trash []
  (icon-module :class "trash" :icon "" 
    (label :text trash_poll)))  

(defwidget updates []
  (icon-module :class "updates" :icon "" :visible {updates_poll != ""}
    (label :text updates_poll))) 

(defwidget powermenu []
  (icon-module :class "powermenu" :icon ""))

(defwidget network []
  (iconmodule :class "network" :icon ""
    (label :text "${round(EWW_NET.enp3s0.NET_UP / 1000000, 2)}/${round(EWW_NET.enp3s0.NET_DOWN / 1000000, 2)}"))) 

(defwidget speaker []
  (icon-module :class "speaker" 
               :icon {speaker_poll.icon}
    (eventbox :onscroll `eww update speaker_poll="$(./modules/speaker.sh {})"`
     (button :onclick `eww update speaker_poll="$(./modules/speaker.sh toogle)"`
        (label :text {speaker_poll.content})))))

(defwidget microphone_old []
  (icon-module :class "microphone" 
               :icon {microphone_poll.icon}
    (eventbox :onscroll `eww update microphone_poll="$(./modules/microphone.sh {})"`
      (button :onclick `eww update microphone_poll="$(./modules/microphone.sh toogle)"`
        (label :text {microphone_poll.content})))))
; foldend

; vim:foldmarker=foldstart,foldend
